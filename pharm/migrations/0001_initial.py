# Generated by Django 5.2.3 on 2025-07-03 19:38

import base.utils
import django.core.validators
import django.db.models.deletion
import pharm.models
import phonenumber_field.modelfields
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DrugCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the model', primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the model was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the model was last updated', verbose_name='Updated At')),
                ('name', models.CharField(help_text='Name of the drug category', max_length=100, unique=True, verbose_name='Name')),
                ('description', models.TextField(blank=True, help_text='Description of the drug category', verbose_name='Description')),
            ],
            options={
                'verbose_name_plural': 'Drug Categories',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='drug_category_name_idx')],
            },
        ),
        migrations.CreateModel(
            name='Drug',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the model', primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the model was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the model was last updated', verbose_name='Updated At')),
                ('name', models.CharField(help_text='Name of the drug', max_length=200, verbose_name='Name')),
                ('description', models.TextField(blank=True, help_text='Description of the drug', verbose_name='Description')),
                ('generic_name', models.CharField(blank=True, help_text='Generic name of the drug', max_length=200, verbose_name='Generic Name')),
                ('manufacturer', models.CharField(blank=True, help_text='Manufacturer of the drug', max_length=200, verbose_name='Manufacturer')),
                ('dosage', models.CharField(blank=True, help_text="Dosage of the drug, e.g., '500mg'", max_length=100, verbose_name='Dosage')),
                ('drug_form', models.CharField(blank=True, help_text="Form of the drug, e.g., 'Tablet', 'Syrup'", max_length=50, verbose_name='Drug Form')),
                ('side_effects', models.TextField(blank=True, help_text='Common side effects of the drug', verbose_name='Side Effects')),
                ('requires_prescription', models.BooleanField(default=False, help_text='Indicates if the drug requires a prescription', verbose_name='Requires Prescription')),
                ('image', models.ImageField(blank=True, help_text='The image of the drug', upload_to=pharm.models.upload_image_path, verbose_name='Image')),
                ('category', models.ForeignKey(help_text='Category of the drug', on_delete=django.db.models.deletion.CASCADE, related_name='drugs', to='pharm.drugcategory', verbose_name='Category')),
            ],
            options={
                'verbose_name_plural': 'Drugs',
                'ordering': ['name'],
                'unique_together': {('name', 'dosage')},
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the model', primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the model was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the model was last updated', verbose_name='Updated At')),
                ('quantity', models.PositiveIntegerField(default=0, help_text='Number of units of the drug available in the pharmacy inventory', verbose_name='Quantity')),
                ('price', models.DecimalField(decimal_places=2, help_text='Selling price per unit of the drug', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Price')),
                ('cost_price', models.DecimalField(blank=True, decimal_places=2, help_text='Cost price per unit of the drug', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Cost Price')),
                ('status', models.CharField(choices=[('available', 'Available'), ('low_stock', 'Low Stock'), ('out_of_stock', 'Out of Stock'), ('discontinued', 'Discontinued')], default='available', help_text='Current availability status of the drug in inventory', max_length=20, verbose_name='Status')),
                ('low_stock_threshold', models.PositiveIntegerField(default=10, help_text='Threshold below which the stock is considered low', verbose_name='Low Stock Threshold')),
                ('expiry_date', models.DateField(blank=True, help_text='Expiry date of the drug batch', null=True, verbose_name='Expiry Date')),
                ('batch_number', models.CharField(blank=True, help_text='Batch number of the drug', max_length=100, verbose_name='Batch Number')),
                ('supplier', models.CharField(blank=True, help_text='Supplier of the drug', max_length=200, verbose_name='Supplier')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the inventory item', verbose_name='Notes')),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='Timestamp when the inventory record was last updated', verbose_name='Last Updated')),
                ('drug', models.ForeignKey(help_text='Drug in the inventory', on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='pharm.drug', verbose_name='Drug')),
            ],
            options={
                'verbose_name_plural': 'Inventories',
                'ordering': ['drug__name'],
            },
        ),
        migrations.CreateModel(
            name='InventoryAlert',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the model', primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the model was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the model was last updated', verbose_name='Updated At')),
                ('alert_type', models.CharField(choices=[('low_stock', 'Low Stock'), ('out_of_stock', 'Out of Stock'), ('expiring_soon', 'Expiring Soon'), ('expired', 'Expired')], help_text='Type of alert, e.g., low stock, out of stock, expiring soon, expired', max_length=20, verbose_name='Alert Type')),
                ('message', models.TextField(help_text='Detailed message describing the alert', verbose_name='Message')),
                ('is_resolved', models.BooleanField(default=False, help_text='Indicates whether the alert has been resolved', verbose_name='Is Resolved')),
                ('inventory', models.ForeignKey(help_text='Inventory item associated with this alert', on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='pharm.inventory', verbose_name='Inventory')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Pharmacy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the model', primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the model was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the model was last updated', verbose_name='Updated At')),
                ('name', models.CharField(help_text='Name of the pharmacy', max_length=200, verbose_name='Name')),
                ('address', models.TextField(help_text='Address of the pharmacy', verbose_name='Address')),
                ('city', models.CharField(help_text='City where the pharmacy is located', max_length=100, verbose_name='City')),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, help_text='Latitude of the pharmacy location', max_digits=10, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, help_text='Longitude of the pharmacy location', max_digits=11, null=True, verbose_name='Longitude')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='Phone number of the pharmacy', max_length=20, region=None, verbose_name='Phone')),
                ('email', models.EmailField(blank=True, help_text='Email address of the pharmacy', max_length=254, verbose_name='Email')),
                ('website', models.URLField(blank=True, help_text='Website URL of the pharmacy', null=True, verbose_name='Website')),
                ('opening_hours', models.CharField(blank=True, help_text="Opening hours of the pharmacy, e.g., '9 AM - 9 PM'", max_length=100, null=True, verbose_name='Opening Hours')),
                ('verified', models.BooleanField(default=False, help_text='Indicates if the pharmacy is verified', verbose_name='Verified')),
                ('working_hours', models.CharField(blank=True, help_text="Working hours of the pharmacy, e.g., '9 AM - 5 PM'", max_length=100, null=True, verbose_name='Working Hours')),
                ('is_24_hours', models.BooleanField(default=False, help_text='Indicates if the pharmacy operates 24 hours', verbose_name='24 Hours')),
                ('license_number', models.CharField(blank=True, help_text='License number of the pharmacy', max_length=100, verbose_name='License Number')),
                ('established_date', models.DateField(blank=True, help_text='Date when the pharmacy was established', null=True, verbose_name='Established Date')),
                ('description', models.TextField(blank=True, help_text='Description of the pharmacy', verbose_name='Description')),
                ('profile_image', models.ImageField(blank=True, help_text='Profile image of the pharmacy', upload_to=pharm.models.upload_image_path, verbose_name='Profile Image')),
                ('logo', models.ImageField(blank=True, help_text='Logo of the pharmacy', upload_to=pharm.models.upload_image_path, verbose_name='Logo')),
                ('certificate_of_operation', models.FileField(help_text='Certificate of the pharmacy', upload_to=pharm.models.upload_image_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'webp', 'pdf']), base.utils.validate_certificate_size_format], verbose_name='Certificate of Approve')),
                ('owner', models.OneToOneField(help_text='Owner of the pharmacy', on_delete=django.db.models.deletion.CASCADE, related_name='pharmacy', to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
            options={
                'verbose_name_plural': 'Pharmacies',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='inventory',
            name='pharmacy',
            field=models.ForeignKey(help_text=' Inventory for a pharmacy ', on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='pharm.pharmacy', verbose_name='Pharmacy'),
        ),
        migrations.CreateModel(
            name='PharmacyVisit',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the model', primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the model was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the model was last updated', verbose_name='Updated At')),
                ('visited_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the user visited the pharmacy', verbose_name='Visited at')),
                ('pharmacy', models.ForeignKey(help_text='Pharmacy visited by the user', on_delete=django.db.models.deletion.CASCADE, related_name='visits', to='pharm.pharmacy', verbose_name='Pharmacy')),
                ('user', models.ForeignKey(help_text='User who visited the pharmacy', on_delete=django.db.models.deletion.CASCADE, related_name='visits', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PriceHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the model', primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the model was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the model was last updated', verbose_name='Updated At')),
                ('old_price', models.DecimalField(decimal_places=2, help_text='Previous price of the inventory item', max_digits=10, verbose_name='Old Price')),
                ('new_price', models.DecimalField(decimal_places=2, help_text='New price of the inventory item', max_digits=10, verbose_name='New Price')),
                ('changed_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the price was changed', verbose_name='Changed At')),
                ('reason', models.CharField(blank=True, help_text='Reason for the price change', max_length=200, verbose_name='Reason')),
                ('changed_by', models.ForeignKey(help_text='User who changed the price', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Changed By')),
                ('inventory', models.ForeignKey(help_text='Inventory item whose price was changed', on_delete=django.db.models.deletion.CASCADE, related_name='price_history', to='pharm.inventory', verbose_name='Inventory')),
            ],
            options={
                'verbose_name_plural': 'Price Histories',
                'ordering': ['-changed_at'],
            },
        ),
        migrations.CreateModel(
            name='SearchHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.CharField(help_text='Search query entered by the user', max_length=200)),
                ('searched_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the search was performed')),
                ('user', models.ForeignKey(help_text='User who performed the search', on_delete=django.db.models.deletion.CASCADE, related_name='search_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Search Histories',
            },
        ),
        migrations.AlterUniqueTogether(
            name='inventory',
            unique_together={('pharmacy', 'drug')},
        ),
        migrations.CreateModel(
            name='PharmacyRating',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the model', primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the model was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the model was last updated', verbose_name='Updated At')),
                ('rating', models.PositiveIntegerField(help_text='Rating given by the user', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Rating')),
                ('review', models.TextField(blank=True, help_text='Review given by the user', verbose_name='Review')),
                ('pharmacy', models.ForeignKey(help_text='Pharmacy that received the rating', on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='pharm.pharmacy', verbose_name='Pharmacy')),
                ('user', models.ForeignKey(help_text='User who gave the rating', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'unique_together': {('pharmacy', 'user')},
            },
        ),
        migrations.CreateModel(
            name='SavedPharmacy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the model', primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the model was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the model was last updated', verbose_name='Updated At')),
                ('saved_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the pharmacy was saved', verbose_name='Saved At')),
                ('pharmacy', models.ForeignKey(help_text='Pharmacy saved by the user', on_delete=django.db.models.deletion.CASCADE, related_name='saved_by', to='pharm.pharmacy', verbose_name='Pharmacy')),
                ('user', models.ForeignKey(help_text='Pharmacy saved by the user', on_delete=django.db.models.deletion.CASCADE, related_name='saved_pharmacies', to=settings.AUTH_USER_MODEL, verbose_name='Saved Pharmacy')),
            ],
            options={
                'verbose_name_plural': 'Saved Pharmacies',
                'unique_together': {('user', 'pharmacy')},
            },
        ),
    ]
